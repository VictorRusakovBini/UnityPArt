// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace core.Networking.Generated {

  /// <summary>Holder for reflection information generated from packets.proto</summary>
  public static partial class PacketsReflection {

    #region Descriptor
    /// <summary>File descriptor for packets.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1wYWNrZXRzLnByb3RvIiwKClBja0Nvbm5lY3QSDgoGdXNlcklkGAEgASgF",
            "Eg4KBnJvb21JZBgCIAEoCSI0ChBQY2tDb25uZWN0UmVzdWx0EiAKBnJlc3Vs",
            "dBgBIAEoDjIQLkpvaW5Sb29tUmVzdWx0cyI6CgtTb21lQmlnU3RhdBINCgVz",
            "dGF0MRgBIAEoBRINCgVzdGF0MhgCIAEoAhINCgVzdGF0MxgDIAEoCSIcCgxQ",
            "Y2tTZW5kU3RhdDESDAoEc3RhdBgBIAEoCSIcCgxQY2tTZW5kU3RhdDISDAoE",
            "c3RhdBgBIAEoBSIqCgxQY2tTZW5kU3RhdDMSGgoEc3RhdBgBIAEoCzIMLlNv",
            "bWVCaWdTdGF0IjoKDFBja1NlbmRTdGF0NBIbCgVzdGF0MRgBIAEoCzIMLlNv",
            "bWVCaWdTdGF0Eg0KBXN0YXQyGAIgASgFKisKD0pvaW5Sb29tUmVzdWx0cxIL",
            "CgdKcnJEb25lEAASCwoHSnJyRmFpbBABQhyqAhljb3JlLk5ldHdvcmtpbmcu",
            "R2VuZXJhdGVkYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::core.Networking.Generated.JoinRoomResults), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::core.Networking.Generated.PckConnect), global::core.Networking.Generated.PckConnect.Parser, new[]{ "UserId", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::core.Networking.Generated.PckConnectResult), global::core.Networking.Generated.PckConnectResult.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::core.Networking.Generated.SomeBigStat), global::core.Networking.Generated.SomeBigStat.Parser, new[]{ "Stat1", "Stat2", "Stat3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::core.Networking.Generated.PckSendStat1), global::core.Networking.Generated.PckSendStat1.Parser, new[]{ "Stat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::core.Networking.Generated.PckSendStat2), global::core.Networking.Generated.PckSendStat2.Parser, new[]{ "Stat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::core.Networking.Generated.PckSendStat3), global::core.Networking.Generated.PckSendStat3.Parser, new[]{ "Stat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::core.Networking.Generated.PckSendStat4), global::core.Networking.Generated.PckSendStat4.Parser, new[]{ "Stat1", "Stat2" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum JoinRoomResults {
    [pbr::OriginalName("JrrDone")] JrrDone = 0,
    [pbr::OriginalName("JrrFail")] JrrFail = 1,
  }

  #endregion

  #region Messages
  public sealed partial class PckConnect : pb::IMessage<PckConnect> {
    private static readonly pb::MessageParser<PckConnect> _parser = new pb::MessageParser<PckConnect>(() => new PckConnect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PckConnect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::core.Networking.Generated.PacketsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckConnect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckConnect(PckConnect other) : this() {
      userId_ = other.userId_;
      roomId_ = other.roomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckConnect Clone() {
      return new PckConnect(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PckConnect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PckConnect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (RoomId != other.RoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PckConnect other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.RoomId.Length != 0) {
        RoomId = other.RoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PckConnectResult : pb::IMessage<PckConnectResult> {
    private static readonly pb::MessageParser<PckConnectResult> _parser = new pb::MessageParser<PckConnectResult>(() => new PckConnectResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PckConnectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::core.Networking.Generated.PacketsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckConnectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckConnectResult(PckConnectResult other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckConnectResult Clone() {
      return new PckConnectResult(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::core.Networking.Generated.JoinRoomResults result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::core.Networking.Generated.JoinRoomResults Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PckConnectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PckConnectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PckConnectResult other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::core.Networking.Generated.JoinRoomResults) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SomeBigStat : pb::IMessage<SomeBigStat> {
    private static readonly pb::MessageParser<SomeBigStat> _parser = new pb::MessageParser<SomeBigStat>(() => new SomeBigStat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SomeBigStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::core.Networking.Generated.PacketsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SomeBigStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SomeBigStat(SomeBigStat other) : this() {
      stat1_ = other.stat1_;
      stat2_ = other.stat2_;
      stat3_ = other.stat3_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SomeBigStat Clone() {
      return new SomeBigStat(this);
    }

    /// <summary>Field number for the "stat1" field.</summary>
    public const int Stat1FieldNumber = 1;
    private int stat1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stat1 {
      get { return stat1_; }
      set {
        stat1_ = value;
      }
    }

    /// <summary>Field number for the "stat2" field.</summary>
    public const int Stat2FieldNumber = 2;
    private float stat2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Stat2 {
      get { return stat2_; }
      set {
        stat2_ = value;
      }
    }

    /// <summary>Field number for the "stat3" field.</summary>
    public const int Stat3FieldNumber = 3;
    private string stat3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stat3 {
      get { return stat3_; }
      set {
        stat3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SomeBigStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SomeBigStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stat1 != other.Stat1) return false;
      if (Stat2 != other.Stat2) return false;
      if (Stat3 != other.Stat3) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stat1 != 0) hash ^= Stat1.GetHashCode();
      if (Stat2 != 0F) hash ^= Stat2.GetHashCode();
      if (Stat3.Length != 0) hash ^= Stat3.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stat1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stat1);
      }
      if (Stat2 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Stat2);
      }
      if (Stat3.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Stat3);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stat1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stat1);
      }
      if (Stat2 != 0F) {
        size += 1 + 4;
      }
      if (Stat3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stat3);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SomeBigStat other) {
      if (other == null) {
        return;
      }
      if (other.Stat1 != 0) {
        Stat1 = other.Stat1;
      }
      if (other.Stat2 != 0F) {
        Stat2 = other.Stat2;
      }
      if (other.Stat3.Length != 0) {
        Stat3 = other.Stat3;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stat1 = input.ReadInt32();
            break;
          }
          case 21: {
            Stat2 = input.ReadFloat();
            break;
          }
          case 26: {
            Stat3 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PckSendStat1 : pb::IMessage<PckSendStat1> {
    private static readonly pb::MessageParser<PckSendStat1> _parser = new pb::MessageParser<PckSendStat1>(() => new PckSendStat1());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PckSendStat1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::core.Networking.Generated.PacketsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat1(PckSendStat1 other) : this() {
      stat_ = other.stat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat1 Clone() {
      return new PckSendStat1(this);
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 1;
    private string stat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stat {
      get { return stat_; }
      set {
        stat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PckSendStat1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PckSendStat1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stat != other.Stat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stat.Length != 0) hash ^= Stat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stat.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Stat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PckSendStat1 other) {
      if (other == null) {
        return;
      }
      if (other.Stat.Length != 0) {
        Stat = other.Stat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Stat = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PckSendStat2 : pb::IMessage<PckSendStat2> {
    private static readonly pb::MessageParser<PckSendStat2> _parser = new pb::MessageParser<PckSendStat2>(() => new PckSendStat2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PckSendStat2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::core.Networking.Generated.PacketsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat2(PckSendStat2 other) : this() {
      stat_ = other.stat_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat2 Clone() {
      return new PckSendStat2(this);
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 1;
    private int stat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stat {
      get { return stat_; }
      set {
        stat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PckSendStat2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PckSendStat2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stat != other.Stat) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stat != 0) hash ^= Stat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stat != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PckSendStat2 other) {
      if (other == null) {
        return;
      }
      if (other.Stat != 0) {
        Stat = other.Stat;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Stat = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PckSendStat3 : pb::IMessage<PckSendStat3> {
    private static readonly pb::MessageParser<PckSendStat3> _parser = new pb::MessageParser<PckSendStat3>(() => new PckSendStat3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PckSendStat3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::core.Networking.Generated.PacketsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat3(PckSendStat3 other) : this() {
      Stat = other.stat_ != null ? other.Stat.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat3 Clone() {
      return new PckSendStat3(this);
    }

    /// <summary>Field number for the "stat" field.</summary>
    public const int StatFieldNumber = 1;
    private global::core.Networking.Generated.SomeBigStat stat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::core.Networking.Generated.SomeBigStat Stat {
      get { return stat_; }
      set {
        stat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PckSendStat3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PckSendStat3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stat, other.Stat)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stat_ != null) hash ^= Stat.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PckSendStat3 other) {
      if (other == null) {
        return;
      }
      if (other.stat_ != null) {
        if (stat_ == null) {
          stat_ = new global::core.Networking.Generated.SomeBigStat();
        }
        Stat.MergeFrom(other.Stat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stat_ == null) {
              stat_ = new global::core.Networking.Generated.SomeBigStat();
            }
            input.ReadMessage(stat_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PckSendStat4 : pb::IMessage<PckSendStat4> {
    private static readonly pb::MessageParser<PckSendStat4> _parser = new pb::MessageParser<PckSendStat4>(() => new PckSendStat4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PckSendStat4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::core.Networking.Generated.PacketsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat4(PckSendStat4 other) : this() {
      Stat1 = other.stat1_ != null ? other.Stat1.Clone() : null;
      stat2_ = other.stat2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PckSendStat4 Clone() {
      return new PckSendStat4(this);
    }

    /// <summary>Field number for the "stat1" field.</summary>
    public const int Stat1FieldNumber = 1;
    private global::core.Networking.Generated.SomeBigStat stat1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::core.Networking.Generated.SomeBigStat Stat1 {
      get { return stat1_; }
      set {
        stat1_ = value;
      }
    }

    /// <summary>Field number for the "stat2" field.</summary>
    public const int Stat2FieldNumber = 2;
    private int stat2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stat2 {
      get { return stat2_; }
      set {
        stat2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PckSendStat4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PckSendStat4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stat1, other.Stat1)) return false;
      if (Stat2 != other.Stat2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stat1_ != null) hash ^= Stat1.GetHashCode();
      if (Stat2 != 0) hash ^= Stat2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stat1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stat1);
      }
      if (Stat2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stat2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stat1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stat1);
      }
      if (Stat2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stat2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PckSendStat4 other) {
      if (other == null) {
        return;
      }
      if (other.stat1_ != null) {
        if (stat1_ == null) {
          stat1_ = new global::core.Networking.Generated.SomeBigStat();
        }
        Stat1.MergeFrom(other.Stat1);
      }
      if (other.Stat2 != 0) {
        Stat2 = other.Stat2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stat1_ == null) {
              stat1_ = new global::core.Networking.Generated.SomeBigStat();
            }
            input.ReadMessage(stat1_);
            break;
          }
          case 16: {
            Stat2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
